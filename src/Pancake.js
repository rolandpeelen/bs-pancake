// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function composeFn(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

var LocalHelpers = {
  composeFn: composeFn
};

function view(lens, state) {
  return Curry._1(lens.get, state);
}

function set(lens, value, state) {
  return Curry._2(lens.set, value, state);
}

function over(lens, fn, state) {
  return Curry._2(lens.set, Curry._1(fn, Curry._1(lens.get, state)), state);
}

function compose(l0, l1) {
  var partial_arg = l1.get;
  var partial_arg$1 = l0.get;
  var partial_arg$2 = l0.set;
  return {
          get: (function (param) {
              return Curry._1(partial_arg$1, Curry._1(partial_arg, param));
            }),
          set: (function (param) {
              var partial_arg$3 = Curry._1(partial_arg$2, param);
              return function (param) {
                return over(l1, partial_arg$3, param);
              };
            })
        };
}

function pipe(l0, l1) {
  return compose(l1, l0);
}

var Infix = {
  $neg$less$less: compose,
  $great$great$neg: pipe
};

function updateAtIndex(xs, i, x) {
  if (xs.length < i) {
    return Belt_Array.mapWithIndex(xs, (function (idx, y) {
                  if (idx === i) {
                    return x;
                  } else {
                    return y;
                  }
                }));
  } else {
    return xs;
  }
}

function atOrElse(i, $$default) {
  return {
          get: (function (xs) {
              return Belt_Option.getWithDefault(Belt_Array.get(xs, i), $$default);
            }),
          set: (function (x, xs) {
              return updateAtIndex(xs, i, x);
            })
        };
}

function atExn(i) {
  return {
          get: (function (xs) {
              return Belt_Array.getExn(xs, i);
            }),
          set: (function (x, xs) {
              return updateAtIndex(xs, i, x);
            })
        };
}

var $$Array = {
  updateAtIndex: updateAtIndex,
  atOrElse: atOrElse,
  atExn: atExn
};

function updateAtIndex$1(xs, i, x) {
  if (Belt_List.length(xs) < i) {
    return Belt_List.mapWithIndex(xs, (function (idx, y) {
                  if (i === idx) {
                    return y;
                  } else {
                    return x;
                  }
                }));
  } else {
    return xs;
  }
}

function atOrElse$1(i, $$default) {
  return {
          get: (function (xs) {
              return Belt_Option.getWithDefault(Belt_List.get(xs, i), $$default);
            }),
          set: (function (x, xs) {
              return updateAtIndex$1(xs, i, x);
            })
        };
}

function atExn$1(i) {
  return {
          get: (function (xs) {
              return Belt_List.getExn(xs, i);
            }),
          set: (function (x, xs) {
              return updateAtIndex$1(xs, i, x);
            })
        };
}

var List = {
  updateAtIndex: updateAtIndex$1,
  atOrElse: atOrElse$1,
  atExn: atExn$1
};

function orElse($$default, lens) {
  return {
          get: (function (x) {
              return Belt_Option.getWithDefault(Curry._1(lens.get, x), $$default);
            }),
          set: (function (x, state) {
              return Curry._2(lens.set, Caml_option.some(x), state);
            })
        };
}

function orExn(lens) {
  return {
          get: (function (x) {
              return Belt_Option.getExn(Curry._1(lens.get, x));
            }),
          set: (function (x, state) {
              return Curry._2(lens.set, Caml_option.some(x), state);
            })
        };
}

var $$Option = {
  orElse: orElse,
  orExn: orExn
};

function orElse$1($$default, lens) {
  return {
          get: (function (x) {
              return Belt_Result.getWithDefault(Curry._1(lens.get, x), $$default);
            }),
          set: (function (x, state) {
              return Curry._2(lens.set, {
                          TAG: /* Ok */0,
                          _0: x
                        }, state);
            })
        };
}

function orExn$1(lens) {
  return {
          get: (function (x) {
              return Belt_Result.getExn(Curry._1(lens.get, x));
            }),
          set: (function (x, state) {
              return Curry._2(lens.set, {
                          TAG: /* Ok */0,
                          _0: x
                        }, state);
            })
        };
}

var Result = {
  orElse: orElse$1,
  orExn: orExn$1
};

exports.LocalHelpers = LocalHelpers;
exports.view = view;
exports.set = set;
exports.over = over;
exports.compose = compose;
exports.pipe = pipe;
exports.Infix = Infix;
exports.$$Array = $$Array;
exports.List = List;
exports.$$Option = $$Option;
exports.Result = Result;
/* No side effect */
